#####################
# General variables #
#####################

external:
  kubeStateMetrics:
    # external.kubeStateMetrics.enabled -- Whether or not to install the `kube-state-metrics` Deployment along with the StackState agent. Set to `false` if you have `kube-state-metrics` already installed on the cluster.
    enabled: true

# extraEnv -- Extra environment variables to be injected into the `DaemonSet` object.
extraEnv: {}

image:
  # image.repository -- Base container image registry.
  repository: docker.io/stackstate/stackstate-agent-2
  # image.tag -- Default container image tag.
  tag: 2.0.4
  # image.pullPolicy -- Default container image pull policy.
  pullPolicy: IfNotPresent

# imagePullSecrets -- Secrets / credentials needed for container image registry.
imagePullSecrets: []

# nameOverride -- Override the name of the chart.
nameOverride: ""
# fullnameOverride -- Override the fullname of the chart.
fullnameOverride: ""

livenessProbe:
  # livenessProbe.enabled -- Enable use of livenessProbe check.
  enabled: true
  # livenessProbe.failureThreshold -- `failureThreshold` for the liveness probe.
  failureThreshold: 3
  # livenessProbe.initialDelaySeconds -- `initialDelaySeconds` for the liveness probe.
  initialDelaySeconds: 10
  # livenessProbe.periodSeconds -- `periodSeconds` for the liveness probe.
  periodSeconds: 10
  # livenessProbe.successThreshold -- `successThreshold` for the liveness probe.
  successThreshold: 1
  # livenessProbe.timeoutSeconds -- `timeoutSeconds` for the liveness probe.
  timeoutSeconds: 2

readinessProbe:
  # readinessProbe.enabled -- Enable use of readinessProbe check.
  enabled: true
  # readinessProbe.failureThreshold -- `failureThreshold` for the readiness probe.
  failureThreshold: 3
  # readinessProbe.initialDelaySeconds -- `initialDelaySeconds` for the readiness probe.
  initialDelaySeconds: 10
  # readinessProbe.periodSeconds -- `periodSeconds` for the readiness probe.
  periodSeconds: 10
  # readinessProbe.successThreshold -- `successThreshold` for the readiness probe.
  successThreshold: 1
  # readinessProbe.timeoutSeconds -- `timeoutSeconds` for the readiness probe.
  timeoutSeconds: 2

# minReadySeconds -- Number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available.
minReadySeconds: 0

resources:
  limits:
    # resources.limits.cpu -- CPU resource limits.
    cpu: "200m"
    # resources.limits.memory -- Memory resource limits.
    memory: 256Mi
  requests:
    # resources.requests.cpu -- CPU resource requests.
    cpu: "200m"
    # resources.requests.memory -- Memory resource requests.
    memory: 256Mi

# updateStrategy -- The update strategy for the DaemonSet object.
updateStrategy: {}
#  rollingUpdate:
#    maxUnavailable: 1
#  type: RollingUpdate

# nodeSelector -- Node labels for pod assignment.
nodeSelector: {}

# tolerations -- Toleration labels for pod assignment.
tolerations: []

# affinity -- Affinity settings for pod assignment.
affinity: {}

########################
# StackState variables #
########################

stackstate:
  # stackstate.apiKey -- (string) **PROVIDE YOUR API KEY HERE** API key to be used by the StackState agent.
  apiKey:
  networkTracing:
    # stackstate.networkTracing.enabled -- Whether or not to enable network tracing.
    enabled: true
  process:
    agent:
      # stackstate.process.agent.enabled -- Whether or not to enable the process agent.
      enabled: true
      # stackstate.process.agent.url -- (string) **PROVIDE STACKSTATE PROCESS AGENT URL HERE** URL of the StackState installation to receive data from the agent.
      url:
  # stackstate.skipSslValidation -- Set to true if self signed certificates are used.
  skipSslValidation: false
  # stackstate.url -- (string) **PROVIDE STACKSTATE URL HERE** URL of the StackState installation to receive data from the agent.
  url:
