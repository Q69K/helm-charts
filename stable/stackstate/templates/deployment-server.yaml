{{- define "stackstate.server.deployment.container.init" -}}
name: server-init
command:
- sh
- -c
- |
  /entrypoint -c {{ include "stackstate.kafka.endpoint" . }},{{ include "stackstate.zookeeper.endpoint" . }},{{ .Release.Name }}-hbase-hdfs-nn-headful:9000 -t 300
image: "{{include "stackstate.wait.image.registry" .}}/{{ .Values.stackstate.components.wait.image.repository }}:{{ .Values.stackstate.components.wait.image.tag }}"
imagePullPolicy: Always
{{- end -}}

{{- define "stackstate.server.deployment.container.main" -}}
{{- $mountSecrets := fromYaml (include "stackstate.mountsecrets" .) -}}
args:
{{- if .Values.stackstate.java.trustStore }}
- -Djavax.net.ssl.trustStore=/opt/docker/secrets/java-cacerts
{{- if .Values.stackstate.java.trustStorePassword }}
- -Djavax.net.ssl.trustStorePassword=${JAVA_TRUSTSTORE_PASSWORD}
{{- end }}
{{- end }}
- -Dlogback.configurationFile=/opt/docker/etc_log/logback.groovy
- -start
env:
{{- $serviceConfig := dict "ServiceName" "server" "ServiceConfig" .Values.stackstate.components.server }}
{{- include "stackstate.service.envvars" (merge $serviceConfig .) }}
{{- include "stackstate.authentication.envvars" . }}
- name: API_KEY
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" . }}-receiver
      key: sts-receiver-api-key
- name: ELASTICSEARCH_URI
  value: "http://{{ include "stackstate.es.endpoint" . }}"
- name: KAFKA_BROKERS
  value: {{ include "stackstate.kafka.endpoint" . | quote }}
- name: HADOOP_USER_NAME
  value: nobody
- name: LICENSE_KEY
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" . }}-license
      key: sts-license-key
- name: RECEIVER_BASE_URL
  value: {{ printf "%s/%s" .Values.stackstate.receiver.baseUrl "receiver" | quote }}
- name: ZOOKEEPER_QUORUM
  value: {{ include "stackstate.zookeeper.endpoint" . | quote }}
- name: CONFIG_FORCE_stackstate_stackPacks_localStackPacksUri
  value: "hdfs://{{ .Release.Name }}-hbase-hdfs-nn-headful:9000/stackpacks"
image: "{{ include "stackstate.image.registry" . }}/{{ .Values.stackstate.components.server.image.repository }}{{ .Values.stackstate.components.all.image.repositorySuffix }}:{{ default .Values.stackstate.components.all.image.tag .Values.stackstate.components.server.image.tag }}"
imagePullPolicy: {{ default .Values.stackstate.components.all.image.pullPolicy .Values.stackstate.components.server.image.pullPolicy | quote }}
livenessProbe:
  httpGet:
    path: /liveness
    port: health
  initialDelaySeconds: 60
  timeoutSeconds: 5
name: server
ports:
- containerPort: 1618
  name: health
- containerPort: 7070
  name: api
- containerPort: 7071
  name: admin
- containerPort: 7080
  name: instance
{{- if .Values.stackstate.components.all.metrics.enabled }}
- containerPort: 9404
  name: metrics
{{- end }}
readinessProbe:
  httpGet:
    path: /readiness
    port: health
  initialDelaySeconds: 60
  timeoutSeconds: 5
{{- with .Values.stackstate.components.server.resources }}
resources:
  {{- toYaml . | nindent 2 }}
{{- end }}
securityContext:
  runAsNonRoot: true
volumeMounts:
- name: config-volume
  mountPath: /opt/docker/etc/application_stackstate.conf
  subPath: application_stackstate.conf
- name: config-volume-log
  mountPath: /opt/docker/etc_log
{{- if $mountSecrets }}
- name: secrets-volume
  mountPath: /opt/docker/secrets
{{- end }}
{{- end -}}

{{- define "stackstate.server.deployment" -}}
{{- $secrets := fromYaml (include "stackstate.mountsecrets" .) -}}
{{- $commonContainer := fromYaml (include "common.container" .) -}}
{{- $overrideContainer := fromYaml (include "stackstate.server.deployment.container.main" .) -}}
{{- $stsstackstateServerMainContainer := (merge $overrideContainer $commonContainer) -}}
{{- $overrideContainer := fromYaml (include "stackstate.server.deployment.container.init" .) -}}
{{- $stsstackstateServerInitContainer := (merge $overrideContainer $commonContainer) -}}
metadata:
  name: {{ template "common.fullname.short" . }}-server
  labels:
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: server
  template:
    metadata:
      annotations:
        {{- include "common.metrics.annotations" (dict "metrics" .Values.stackstate.components.all.metrics "port" "9404" "container_name" "server") | indent 8 }}
        {{- include "stackstate.common.secret.checksum" . | nindent 8 }}
        {{- include "stackstate.server.secret.checksum" . | nindent 8 }}
        {{- include "stackstate.server.configmap.checksum" . | nindent 8 }}
      labels:
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: {{ template "common.fullname.short" . }}-server
    {{ include "stackstate.image.pullSecret.name" . | nindent 6 }}
      initContainers:
      - {{ toYaml $stsstackstateServerInitContainer | nindent 8 }}
      - {{ include "stackstate.initContainer.ensure.no.server.statefulset.pod.are.running" . | nindent 8 }}
      containers:
      - {{ toYaml $stsstackstateServerMainContainer | nindent 8 }}
    {{- if or .Values.stackstate.components.all.nodeSelector .Values.stackstate.components.server.nodeSelector }}
      nodeSelector:
      {{- with .Values.stackstate.components.all.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.server.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if or .Values.stackstate.components.all.affinity .Values.stackstate.components.server.affinity }}
      affinity:
      {{- with .Values.stackstate.components.all.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.server.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if or .Values.stackstate.components.all.tolerations .Values.stackstate.components.server.tolerations }}
      tolerations:
      {{- with .Values.stackstate.components.all.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.server.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ template "common.fullname.short" . }}-server
      - name: config-volume-log
        configMap:
          name: {{ template "common.fullname.short" . }}-server-log
    {{- if $secrets }}
      - name: secrets-volume
        secret:
          secretName: {{ template "common.fullname.short" . }}-common
          items:
      {{- range $key, $val := $secrets }}
          - key: {{ $key }}
            path: {{ $val }}

      {{- end }}
    {{- end }}
{{- end -}}

{{- if not .Values.stackstate.experimental.server.split }}
{{- $commonDeployment := fromYaml (include "common.deployment" .) -}}
{{- $serverDeployment := fromYaml (include "stackstate.server.deployment" .) -}}
{{- toYaml (merge $serverDeployment $commonDeployment) -}}
{{- end }}
