#####################
# General variables #
#####################

global:
  extraEnv:
    # global.extraEnv.open -- Extra open environment variables to inject into pods.
    open: {}
    # global.extraEnv.secret -- Extra secret environment variables to inject into pods via a `Secret` object.
    secret: {}
  # global.imagePullSecrets -- Secrets / credentials needed for container image registry.
  imagePullSecrets: []

dependencies:
  kubeStateMetrics:
    # dependencies.kubeStateMetrics.enabled -- Whether or not to install the `kube-state-metrics` Deployment along with the StackState cluster agent. Set to `false` if you have `kube-state-metrics` already installed on the cluster.
    enabled: true

# nameOverride -- Override the name of the chart.
nameOverride: ""
# fullnameOverride -- Override the fullname of the chart.
fullnameOverride: ""

agent:
  apm:
    # agent.apm.enabled -- Enable / disable the agent APM module.
    enabled: true
  networkTracing:
    # agent.networkTracing.enabled -- Enable / disable the agent network tracing module.
    enabled: true
  processAgent:
    # agent.processAgent.blacklistPatterns -- Patterns to ignore when sending processes to StackState.
    blacklistPatterns: "^stress,^-bash,^-sh,^su$,^/lib/systemd/,^/usr/lib/systemd/,^pickup,^/sbin/,^/usr/sbin/,^qmgr,^sshd:,^/usr/bin/vi(?:m|m.basic)?\\s,^/usr/bin/tail,^\\(sd-pam\\),^/compose-controller\\s,^/api-server,^containerd-shim,^docker-container-shim,^docker-containerd,^docker-containerd-shim,^pause,^/pause,^/usr/lib/accountsservice/accounts-daemon,^/usr/sbin/acpid,^/adapter,^/sbin/agetty,^/bin/alertmanager*,^/usr/bin/amazon-ssm-agent,^/usr/lib/at-spi2-core/at-spi-bus-launcher,^/usr/lib/at-spi2-core/at-spi2-registryd,^atlantis,^avahi-daemon.,^awk,^/app/aws-k8s-agent,^bash,^/bin/bash,^/usr/bin/bash,^sh,^/bin/sh,^/usr/bin/sh,^/bin/busybox,^/usr/lib/bluetooth/bluetoothd,^/app/cmd/cainjector/cainjector,^calico-node,^calico-typha,^/bin/chaoskube,^./cluster-autoscaler,^/usr/lib/colord/colord,^/configmap-reload,^/usr/bin/containerd,^./controller,^/coredns,^/usr/sbin/cron,^crond,^/usr/sbin/cupsd,^/usr/bin/dbus-daemon,^/usr/lib/dconf/dconf-service,^/sbin/dhclient,^/usr/sbin/dnsmasq,^/usr/bin/dockerd,^dotnet,^.*dumb-init,^/usr/bin/exporter,^external-dns,^/usr/lib/x86_64-linux-gnu/fwupd/fwupd,^/usr/bin/ghostunnel,^/usr/lib/gvfs/gvfsd-fuse,^/usr/lib/gvfs/gvfsd,^.*indicator-application/indicator-application-service,^.*indicator-bluetooth/indicator-bluetooth-service,^.*indicator-datetime/indicator-datetime-service,^.*indicator-keyboard/indicator-keyboard-service,^.*indicator-messages/indicator-messages-service,^.*indicator-power/indicator-power-service,^.*indicator-session/indicator-session-service,^.indicator-sound/indicator-sound-service,^/bin/IngressMonitorController,^/sbin/init,^/usr/sbin/irqbalance,^/go/bin/kube-eagle,^kube-proxy,^/kube-state-metrics,^kube2iam,^lightdm,^/usr/bin/lsmd,^/sbin/lvmetad,^/usr/libexec/postfix/master,^/metrics-server,^/usr/sbin/ModemManager,^/usr/sbin/NetworkManager,^/nginx-ingress-controller,^nm-applet,^/usr/bin/kubelet,^/usr/sbin/lightdm,^/bin/node_exporter,^/usr/lib/x86_64-linux-gnu/notify-osd,^/bin/oauth2_proxy,^/usr/lib/policykit-1/polkitd,^/usr/bin/pulseaudio,^rescheduler,^/usr/sbin/rsyslogd,^/usr/lib/rtkit/rtkit-daemon,^ruby,^/usr/local/bin/ruby,^runsv,^/usr/bin/runsvdir,^/home/weave/runsvinit,^/bin/operator,^s6-format-filter,^s6-supervise,^s6-svscan,^s6-,^sleep,^/usr/sbin/sshd,^./lib/systemd/systemd-journald,^/lib/systemd/systemd-logind,^/lib/systemd/systemd-timesyncd,^./lib/systemd/systemd-udevd,^/lib/systemd/systemd,^tail,^/usr/sbin/thermald,^/tiller,^/usr/bin/tini,^tini,^/usr/lib/udisks2/udisksd,^/usr/sbin/unity-greeter,^.*unity-settings-daemon,^/usr/bin/unpigz,^/usr/lib/upower/upowerd,^upstart,^/app/cmd/webhook/webhook,^/usr/bin/whoopsie,^/sbin/wpa_supplicant,^/usr/lib/xorg/Xorg"
    # agent.processAgent.enabled -- Enable / disable the agent process agent module.
    enabled: true
  # agent.skipSslValidation -- Set to true if self signed certificates are used.
  skipSslValidation: false

  image:
    # agent.image.repository -- Base container image registry.
    repository: docker.io/stackstate/stackstate-agent-2
    # agent.image.tag -- Default container image tag.
    tag: 2.0.7
    # agent.image.pullPolicy -- Default container image pull policy.
    pullPolicy: IfNotPresent

  livenessProbe:
    # agent.livenessProbe.enabled -- Enable use of livenessProbe check.
    enabled: true
    # agent.livenessProbe.failureThreshold -- `failureThreshold` for the liveness probe.
    failureThreshold: 3
    # agent.livenessProbe.initialDelaySeconds -- `initialDelaySeconds` for the liveness probe.
    initialDelaySeconds: 15
    # agent.livenessProbe.periodSeconds -- `periodSeconds` for the liveness probe.
    periodSeconds: 15
    # agent.livenessProbe.successThreshold -- `successThreshold` for the liveness probe.
    successThreshold: 1
    # agent.livenessProbe.timeoutSeconds -- `timeoutSeconds` for the liveness probe.
    timeoutSeconds: 5

  # agent.logLevel -- Logging level for agent processes.
  logLevel: DEBUG

  readinessProbe:
    # agent.readinessProbe.enabled -- Enable use of readinessProbe check.
    enabled: true
    # agent.readinessProbe.failureThreshold -- `failureThreshold` for the readiness probe.
    failureThreshold: 3
    # agent.readinessProbe.initialDelaySeconds -- `initialDelaySeconds` for the readiness probe.
    initialDelaySeconds: 15
    # agent.readinessProbe.periodSeconds -- `periodSeconds` for the readiness probe.
    periodSeconds: 15
    # agent.readinessProbe.successThreshold -- `successThreshold` for the readiness probe.
    successThreshold: 1
    # agent.readinessProbe.timeoutSeconds -- `timeoutSeconds` for the readiness probe.
    timeoutSeconds: 5

  # agent.resources -- Resources for agent pods.
  resources: {}
    # limits:
    #   cpu: "200m"
    #   memory: 256Mi
    # requests:
    #   cpu: "200m"
    #   memory: 256Mi

  # agent.updateStrategy -- The update strategy for the DaemonSet object.
  updateStrategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxUnavailable: 1

  # agent.nodeSelector -- Node labels for pod assignment.
  nodeSelector: {}

  # agent.tolerations -- Toleration labels for pod assignment.
  tolerations: []

  # agent.affinity -- Affinity settings for pod assignment.
  affinity: {}

clusterAgent:
  collection:
    # clusterAgent.collection.kubernetesEvents -- Enable / disable the cluster agent events collection.
    kubernetesEvents: true
    # clusterAgent.collection.kubernetesMetrics -- Enable / disable the cluster agent metrics collection.
    kubernetesMetrics: true
    # clusterAgent.collection.kubernetesTimeout -- Default timeout (in seconds) when obtaining informaton from the Kubernetes API.
    kubernetesTimeout: 10
    # clusterAgent.collection.kubernetesTopology -- Enable / disable the cluster agent topology collection.
    kubernetesTopology: true

  # clusterAgent.enabled -- Enable / disable the cluster agent.
  enabled: true

  image:
    # clusterAgent.image.repository -- Base container image registry.
    repository: docker.io/stackstate/stackstate-cluster-agent
    # clusterAgent.image.tag -- Default container image tag.
    tag: 2.0.7
    # clusterAgent.image.pullPolicy -- Default container image pull policy.
    pullPolicy: IfNotPresent

  livenessProbe:
    # clusterAgent.livenessProbe.enabled -- Enable use of livenessProbe check.
    enabled: true
    # clusterAgent.livenessProbe.failureThreshold -- `failureThreshold` for the liveness probe.
    failureThreshold: 3
    # clusterAgent.livenessProbe.initialDelaySeconds -- `initialDelaySeconds` for the liveness probe.
    initialDelaySeconds: 15
    # clusterAgent.livenessProbe.periodSeconds -- `periodSeconds` for the liveness probe.
    periodSeconds: 15
    # clusterAgent.livenessProbe.successThreshold -- `successThreshold` for the liveness probe.
    successThreshold: 1
    # clusterAgent.livenessProbe.timeoutSeconds -- `timeoutSeconds` for the liveness probe.
    timeoutSeconds: 5

  # clusterAgent.logLevel -- Logging level for agent processes.
  logLevel: DEBUG

  readinessProbe:
    # clusterAgent.readinessProbe.enabled -- Enable use of readinessProbe check.
    enabled: true
    # clusterAgent.readinessProbe.failureThreshold -- `failureThreshold` for the readiness probe.
    failureThreshold: 3
    # clusterAgent.readinessProbe.initialDelaySeconds -- `initialDelaySeconds` for the readiness probe.
    initialDelaySeconds: 15
    # clusterAgent.readinessProbe.periodSeconds -- `periodSeconds` for the readiness probe.
    periodSeconds: 15
    # clusterAgent.readinessProbe.successThreshold -- `successThreshold` for the readiness probe.
    successThreshold: 1
    # clusterAgent.readinessProbe.timeoutSeconds -- `timeoutSeconds` for the readiness probe.
    timeoutSeconds: 5

  # clusterAgent.replicaCount -- Number of replicas of the cluster agent to deploy.
  replicaCount: 1

  resources:
    limits:
      # clusterAgent.resources.limits.cpu -- CPU resource limits.
      cpu: "200m"
      # clusterAgent.resources.limits.memory -- Memory resource limits.
      memory: "256Mi"
    requests:
      # clusterAgent.resources.requests.cpu -- CPU resource requests.
      cpu: "50m"
      # clusterAgent.resources.requests.memory -- Memory resource requests.
      memory: "64Mi"

  # clusterAgent.nodeSelector -- Node labels for pod assignment.
  nodeSelector: {}

  # clusterAgent.tolerations -- Toleration labels for pod assignment.
  tolerations: []

  # clusterAgent.affinity -- Affinity settings for pod assignment.
  affinity: {}

########################
# StackState variables #
########################

stackstate:
  # stackstate.apiKey -- (string) **PROVIDE YOUR API KEY HERE** API key to be used by the StackState agent.
  apiKey:
  cluster:
    # stackstate.cluster.name -- (string) **PROVIDE KUBERNETES CLUSTER NAME HERE** Name of the Kubernetes cluster where the agent will be installed.
    name:
    # stackstate.cluster.authToken -- Provide a token to enable secure communication between the agent and the cluster agent.
    authToken: ""
  # stackstate.url -- (string) **PROVIDE STACKSTATE URL HERE** URL of the StackState installation to receive data from the agent.
  url:
