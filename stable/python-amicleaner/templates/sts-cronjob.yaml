apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "python-amicleaner.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "python-amicleaner.labels" . | indent 4 }}
spec:
  failedJobsHistoryLimit: {{ .Values.failedJobsHistoryLimit }}
  schedule: {{ .Values.schedule | quote }}
  successfulJobsHistoryLimit: {{ .Values.successfulJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
          {{- with .Values.podAnnotations }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
            {{- include "python-amicleaner.checksum-configs" . | nindent 12 }}
          labels:
            app.kubernetes.io/instance: {{ .Release.Name }}
            app.kubernetes.io/name: {{ include "python-amicleaner.name" . }}
        spec:
          backoffLimit: {{ .Values.backoffLimit }}
        {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
        {{- end }}
          containers:
          - name: {{ .Chart.Name }}
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            args:
              - sh
              - -xc
              - |
                cp /aws-secret/config {{ .Values.aws.mountPath }}/config || true
                cp /aws-secret/credentials {{ .Values.aws.mountPath }}/credentials || true
                for account in demo preprod prod sandbox tooling trials; do
                  export AWS_PROFILE="stackstate-${account}"
                  echo "############### Using profile ${AWS_PROFILE} ############### "
                  ami_names="$(aws ec2 describe-images --owners self | jq -r '.Images[].Tags[]? | select(.Key == "Name") | .Value' | sort | uniq)"

                  if [ -n "${DRY_RUN+set}" ]; then
                    echo "y" | amicleaner --check-orphans # Testing
                  else
                    echo "y" | amicleaner --check-orphans --force-delete
                  fi

                  for ami in ${ami_names}; do
                    if [ -n "${DRY_RUN+set}" ]; then
                      echo "n" | amicleaner --mapping-key="name" --mapping-values="${ami}" --keep-previous 1 # Testing
                    else
                      amicleaner --mapping-key="name" --mapping-values="${ami}" --keep-previous 1 --force-delete
                    fi
                  done
                done
            env:
              {{- include "python-amicleaner.env-vars" . | nindent 14 }}
            resources:
              {{- toYaml .Values.resources | nindent 14 }}
            volumeMounts:
              - mountPath: {{ .Values.aws.mountPath }}
                name: aws-volume
              - mountPath: /aws-secret
                name: aws-secret
                readOnly: true
          restartPolicy: {{ .Values.restartPolicy }}
        {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
        {{- end }}
          securityContext:
            fsGroup: 1000
            runAsUser: 1000
          volumes:
            - name: aws-secret
              secret:
                secretName: {{ include "python-amicleaner.fullname" . }}
            - name: aws-volume
              emptyDir: {}
