{{/* vim: set filetype=mustache: */}}
{{/*
Expand the name of the chart.
*/}}
{{- define "hadoop.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Expand the name of the chart.
*/}}
{{- define "hbase.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Get and use nested subchart templates with the proper context. The reason this is needed is because when pulling
in a subchart (like ZooKeeper), the subchart will create objects based on it's own 'fullName' template. That 'fullName'
template is often needed within a parent chart to reference a created Service / Secret / etc. objects for use in the
parent chart.
*/}}
{{- define "call-nested" }}
{{- $dot := index . 0 }}
{{- $subchart := index . 1 }}
{{- $template := index . 2 }}
{{- include $template (dict "Chart" (dict "Name" $subchart) "Values" (index $dot.Values $subchart) "Release" $dot.Release "Capabilities" $dot.Capabilities) }}
{{- end }}

{{/*
Common environment variables for HDFS configuration.
*/}}
{{- define "hbase.hdfs.commonEnv" }}
- name: CORE_CONF_fs_defaultFS
  value: "hdfs://{{ template "common.fullname.short" . }}-hdfs-nn:9000/"
- name: HDFS_CONF_dfs_client_retry_policy_enabled
  value: "true"
- name: HDFS_CONF_dfs_client_retry_policy_spec
  value: "1000,6,2000,10"
- name: HDFS_CONF_dfs_client_use_datanode_hostname
  value: "false"
- name: HDFS_CONF_dfs_datanode_data_dir
  value: "/hadoop-data"
- name: HDFS_CONF_dfs_datanode_sync_behind_writes
  value: "true"
- name: HDFS_CONF_dfs_datanode_synconclose
  value: "true"
- name: HDFS_CONF_dfs_datanode_use_datanode_hostname
  value: "false"
- name: HDFS_CONF_dfs_namenode_checkpoint_dir
  value: "/hadoop-data"
- name: HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check
  value: "false"
- name: HDFS_CONF_dfs_namenode_http___bind___host
  value: "0.0.0.0"
- name: HDFS_CONF_dfs_namenode_https___bind___host
  value: "0.0.0.0"
- name: HDFS_CONF_dfs_namenode_name_dir
  value: "/hadoop-data"
- name: HDFS_CONF_dfs_namenode_rpc___bind___host
  value: "0.0.0.0"
- name: HDFS_CONF_dfs_namenode_servicerpc___bind___host
  value: "0.0.0.0"
- name: HDFS_CONF_dfs_replication
  value: "2"
- name: HDFS_CONF_dfs_secondary_http_address
  value: "0.0.0.0:50090"
{{- end }}

{{/*
Common environment variables for HBase configuration.
*/}}
{{- define "hbase.hbase.commonEnv" }}
- name: HBASE_CONF_data_tx_bind_address
  value: "0.0.0.0"
- name: HBASE_CONF_data_tx_bind_port
  value: "15165"
- name: HBASE_CONF_data_tx_grace_period
  value: "60"
- name: HBASE_CONF_data_tx_log_sync
  value: "false"
- name: HBASE_CONF_data_tx_max_lifetime
  value: "600"
- name: HBASE_CONF_data_tx_max_timeout
  value: "600"
- name: HBASE_CONF_data_tx_prune_enable
  value: "true"
- name: HBASE_CONF_data_tx_prune_flush_interval
  value: "600"
- name: HBASE_CONF_data_tx_prune_interval
  value: "600"
- name: HBASE_CONF_data_tx_retention_default_window
  value: "691200"
- name: HBASE_CONF_data_tx_retention_filterfactory
  value: "com.stackvista.graph.tephra.retention.StackGraphRetentionFilterFactory"
- name: HBASE_CONF_data_tx_snapshot_dir
  value: "/tx"
- name: HBASE_CONF_data_tx_snapshot_interval
  value: "600"
- name: HBASE_CONF_data_tx_snapshot_use_local
  value: "false"
- name: HBASE_CONF_data_tx_zookeeper_quorum
  value: {{ include "hbase.zookeeper.endpoint" . | quote }}
- name: HBASE_CONF_hbase_cluster_distributed
  value: "true"
- name: HBASE_CONF_hbase_hregion_majorcompaction
  value: "86400000"
- name: HBASE_CONF_hbase_master
  value: "{{ template "common.fullname.short" . }}-hbase-master:16000"
- name: HBASE_CONF_hbase_master_ipc_address
  value: "0.0.0.0"
- name: HBASE_CONF_hbase_offpeak_end_hour
  value: "4"
- name: HBASE_CONF_hbase_offpeak_start_hour
  value: "1"
- name: HBASE_CONF_hbase_procedure_store_wal_use_hsync
  value: "true"
- name: HBASE_CONF_hbase_regionserver_info_bindAddress
  value: "0.0.0.0"
- name: HBASE_CONF_hbase_regionserver_ipc_address
  value: "0.0.0.0"
- name: HBASE_CONF_hbase_rootdir
  value: "hdfs://{{ template "common.fullname.short" . }}-hdfs-nn:9000/hbase"
- name: HBASE_CONF_hbase_zookeeper_quorum
  value: {{ include "hbase.zookeeper.endpoint" . | quote }}
- name: HBASE_CONF_zookeeper_znode_parent
  value: "/hbase"
{{- end }}

{{/*
Common extra environment variables for all processes inherited through `all.extraEnv`
*/}}
{{- define "all.commonEnv" -}}
{{- if .Values.all.extraEnv.open }}
  {{- range $key, $value := .Values.all.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.all.extraEnv.secret }}
  {{- range $key, $value := .Values.all.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-common
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HBase master extra environment variables for all processes inherited through `hbase.master.extraEnv`
*/}}
{{- define "hbase.master.commonEnv" -}}
{{- if .Values.hbase.master.extraEnv.open }}
  {{- range $key, $value := .Values.hbase.master.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hbase.master.extraEnv.secret }}
  {{- range $key, $value := .Values.hbase.master.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hbase-master
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HBase regionserver extra environment variables for all processes inherited through `hbase.regionserver.extraEnv`
*/}}
{{- define "hbase.regionserver.commonEnv" -}}
{{- if .Values.hbase.regionserver.extraEnv.open }}
  {{- range $key, $value := .Values.hbase.regionserver.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hbase.regionserver.extraEnv.secret }}
  {{- range $key, $value := .Values.hbase.regionserver.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hbase-rs
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HDFS datanode extra environment variables for all processes inherited through `hdfs.datanode.extraEnv`
*/}}
{{- define "hdfs.datanode.commonEnv" -}}
{{- if .Values.hdfs.datanode.extraEnv.open }}
  {{- range $key, $value := .Values.hdfs.datanode.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hdfs.datanode.extraEnv.secret }}
  {{- range $key, $value := .Values.hdfs.datanode.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hdfs-dn
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HDFS namenode extra environment variables for all processes inherited through `hdfs.namenode.extraEnv`
*/}}
{{- define "hdfs.namenode.commonEnv" -}}
{{- if .Values.hdfs.namenode.extraEnv.open }}
  {{- range $key, $value := .Values.hdfs.namenode.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hdfs.namenode.extraEnv.secret }}
  {{- range $key, $value := .Values.hdfs.namenode.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hdfs-nn
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HDFS secondarynamenode extra environment variables for all processes inherited through `hdfs.secondarynamenode.extraEnv`
*/}}
{{- define "hdfs.secondarynamenode.commonEnv" -}}
{{- if .Values.hdfs.secondarynamenode.extraEnv.open }}
  {{- range $key, $value := .Values.hdfs.secondarynamenode.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hdfs.secondarynamenode.extraEnv.secret }}
  {{- range $key, $value := .Values.hdfs.secondarynamenode.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hdfs-snn
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
Tephra extra environment variables for all processes inherited through `tephra.extraEnv`
*/}}
{{- define "tephra.commonEnv" -}}
{{- if .Values.tephra.extraEnv.open }}
  {{- range $key, $value := .Values.tephra.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.tephra.extraEnv.secret }}
  {{- range $key, $value := .Values.tephra.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-tephra
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
Console extra environment variables for all processes inherited through `console.extraEnv`
*/}}
{{- define "console.commonEnv" -}}
{{- if .Values.console.extraEnv.open }}
  {{- range $key, $value := .Values.console.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.console.extraEnv.secret }}
  {{- range $key, $value := .Values.console.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-console
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}
